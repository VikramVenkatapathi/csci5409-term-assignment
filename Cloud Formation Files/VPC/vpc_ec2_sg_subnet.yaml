AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC for use with a DynamoDB instance and a React app on EC2

Parameters:
  InstanceType:
    Description: EC2 instance type for the React app
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type from the list.

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      InstanceTenancy: default
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  BackEndEC2Instance: #EC2 instance for the backend in Flask   
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2:1}}'
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId # Use Fn::GetAtt to get the Security Group ID
      SubnetId: !Ref PrivateSubnet1 # Specify the subnet where the instance should be launched
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the system
          sudo yum update -y
          # Install Docker
          sudo yum install -y docker
          # Start the Docker service.
          sudo service docker start
          # Add the ec2-user to the docker group so that you can run Docker commands without using sudo.
          sudo usermod -a -G docker ec2-user
          # Docker login
          docker login --username vikramvenkatapathi --password '#Vikram2000'
          # Pull the Docker image from Docker Hub
          docker pull vikramvenkatapathi/cloud_term_assignment_backend:flask-app-back-end
          # Run the Docker container
          docker run -p 5000:5000 vikramvenkatapathi/cloud_term_assignment_backend:flask-app-back-end
      IamInstanceProfile: LabInstanceProfile #name of instance profile, not ARN!!!

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp # Custom rule for Flask app
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

Outputs:
  BackEndInstanceId:
    Value: !Ref BackEndEC2Instance
    Description: Instance Id of the backend EC2 instance.
  BackEndPrivateIp:
    Value: !GetAtt BackEndEC2Instance.PrivateIp
    Description: Private IP of the backend EC2 instance.
